
Slave2 ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000006dc  00000770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800076  00800076  00000786  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001562  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a08  00000000  00000000  000027cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a94  00000000  00000000  000039de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
  8a:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC_INIT>:
#include "Air_Conditoner.h"

void AC_INIT(void)

{
	DIO_SetPinDir(DIO_PORTC , DIO_PIN4 , DIO_PIN_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
  9c:	08 95       	ret

0000009e <AC_ON>:
}
void AC_ON(void)

{
	DIO_SetPinVal(DIO_PORTC , DIO_PIN4 , DIO_PIN_HIGH);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	64 e0       	ldi	r22, 0x04	; 4
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
  a8:	08 95       	ret

000000aa <AC_OFF>:
}
void AC_OFF(void)

{
	DIO_SetPinVal(DIO_PORTC , DIO_PIN4 , DIO_PIN_LOW);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	64 e0       	ldi	r22, 0x04	; 4
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
  b4:	08 95       	ret

000000b6 <DIO_SetPinDir>:
		PORTC= val;
		break;
		

		case DIO_PORTD:
		PORTD= val;
  b6:	44 23       	and	r20, r20
  b8:	b9 f1       	breq	.+110    	; 0x128 <DIO_SetPinDir+0x72>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_SetPinDir+0xa>
  be:	6b c0       	rjmp	.+214    	; 0x196 <DIO_SetPinDir+0xe0>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	89 f0       	breq	.+34     	; 0xe6 <DIO_SetPinDir+0x30>
  c4:	28 f0       	brcs	.+10     	; 0xd0 <DIO_SetPinDir+0x1a>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	c9 f0       	breq	.+50     	; 0xfc <DIO_SetPinDir+0x46>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	11 f1       	breq	.+68     	; 0x112 <DIO_SetPinDir+0x5c>
  ce:	08 95       	ret
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SetPinDir+0x26>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SetPinDir+0x22>
  e0:	82 2b       	or	r24, r18
  e2:	8a bb       	out	0x1a, r24	; 26
  e4:	08 95       	ret
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDir+0x3c>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDir+0x38>
  f6:	82 2b       	or	r24, r18
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	08 95       	ret
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPinDir+0x52>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPinDir+0x4e>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
 112:	21 b3       	in	r18, 0x11	; 17
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinDir+0x68>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinDir+0x64>
 122:	82 2b       	or	r24, r18
 124:	81 bb       	out	0x11, r24	; 17
 126:	08 95       	ret
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 f0       	breq	.+36     	; 0x150 <DIO_SetPinDir+0x9a>
 12c:	28 f0       	brcs	.+10     	; 0x138 <DIO_SetPinDir+0x82>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	d9 f0       	breq	.+54     	; 0x168 <DIO_SetPinDir+0xb2>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	29 f1       	breq	.+74     	; 0x180 <DIO_SetPinDir+0xca>
 136:	08 95       	ret
 138:	2a b3       	in	r18, 0x1a	; 26
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPinDir+0x8e>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPinDir+0x8a>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	8a bb       	out	0x1a, r24	; 26
 14e:	08 95       	ret
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPinDir+0xa6>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPinDir+0xa2>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	87 bb       	out	0x17, r24	; 23
 166:	08 95       	ret
 168:	24 b3       	in	r18, 0x14	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinDir+0xbe>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinDir+0xba>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	84 bb       	out	0x14, r24	; 20
 17e:	08 95       	ret
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDir+0xd6>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDir+0xd2>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret

00000198 <DIO_SetPinVal>:
		break ;
	}
}
void DIO_SetPinVal(uint8 Port, uint8 pin, uint8 val)
{
	switch(val)
 198:	44 23       	and	r20, r20
 19a:	b9 f1       	breq	.+110    	; 0x20a <DIO_SetPinVal+0x72>
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <DIO_SetPinVal+0xa>
 1a0:	6b c0       	rjmp	.+214    	; 0x278 <DIO_SetPinVal+0xe0>
	{
		case DIO_PIN_HIGH :
		
		switch (Port)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <DIO_SetPinVal+0x30>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_SetPinVal+0x1a>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	c9 f0       	breq	.+50     	; 0x1de <DIO_SetPinVal+0x46>
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	11 f1       	breq	.+68     	; 0x1f4 <DIO_SetPinVal+0x5c>
 1b0:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , pin);
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinVal+0x26>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinVal+0x22>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
			break;
 1c6:	08 95       	ret
			
			case DIO_PORTB :
			SET_BIT(PORTB , pin);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinVal+0x3c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinVal+0x38>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
			break;
 1dc:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC , pin);
 1de:	25 b3       	in	r18, 0x15	; 21
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SetPinVal+0x52>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SetPinVal+0x4e>
 1ee:	82 2b       	or	r24, r18
 1f0:	85 bb       	out	0x15, r24	; 21
			break;
 1f2:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD , pin);
 1f4:	22 b3       	in	r18, 0x12	; 18
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPinVal+0x68>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPinVal+0x64>
 204:	82 2b       	or	r24, r18
 206:	82 bb       	out	0x12, r24	; 18
			break;
 208:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch (Port)
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	91 f0       	breq	.+36     	; 0x232 <DIO_SetPinVal+0x9a>
 20e:	28 f0       	brcs	.+10     	; 0x21a <DIO_SetPinVal+0x82>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	d9 f0       	breq	.+54     	; 0x24a <DIO_SetPinVal+0xb2>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	29 f1       	breq	.+74     	; 0x262 <DIO_SetPinVal+0xca>
 218:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , pin);
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPinVal+0x8e>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPinVal+0x8a>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	8b bb       	out	0x1b, r24	; 27
			break;
 230:	08 95       	ret
			
			case DIO_PORTB :
			CLR_BIT(PORTB , pin);
 232:	28 b3       	in	r18, 0x18	; 24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPinVal+0xa6>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPinVal+0xa2>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	88 bb       	out	0x18, r24	; 24
			break;
 248:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC , pin);
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_SetPinVal+0xbe>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_SetPinVal+0xba>
 25a:	80 95       	com	r24
 25c:	82 23       	and	r24, r18
 25e:	85 bb       	out	0x15, r24	; 21
			break;
 260:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD , pin);
 262:	22 b3       	in	r18, 0x12	; 18
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPinVal+0xd6>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPinVal+0xd2>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	82 bb       	out	0x12, r24	; 18
 278:	08 95       	ret

0000027a <LCD_Write_Command>:
	LCD_Write_Command(arr[row]+col);
}

void LCD_Clear(void)
{
	LCD_Write_Command(0x01); // clear screen if thing is written
 27a:	cf 93       	push	r28
 27c:	c8 2f       	mov	r28, r24
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	9c 2f       	mov	r25, r28
 2a0:	90 7f       	andi	r25, 0xF0	; 240
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	89 2b       	or	r24, r25
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	63 e0       	ldi	r22, 0x03	; 3
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_Write_Command+0x3c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_Write_Command+0x42>
 2bc:	00 00       	nop
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	63 e0       	ldi	r22, 0x03	; 3
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 2c8:	20 e1       	ldi	r18, 0x10	; 16
 2ca:	c2 9f       	mul	r28, r18
 2cc:	c0 01       	movw	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	9b b3       	in	r25, 0x1b	; 27
 2d2:	9f 70       	andi	r25, 0x0F	; 15
 2d4:	89 2b       	or	r24, r25
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 2e2:	8f e9       	ldi	r24, 0x9F	; 159
 2e4:	9f e0       	ldi	r25, 0x0F	; 15
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_Write_Command+0x6c>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_Write_Command+0x72>
 2ec:	00 00       	nop
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 2f8:	8f e1       	ldi	r24, 0x1F	; 31
 2fa:	9e e4       	ldi	r25, 0x4E	; 78
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_Write_Command+0x82>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_Write_Command+0x88>
 302:	00 00       	nop
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <LCD_INIT>:
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	65 e0       	ldi	r22, 0x05	; 5
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	66 e0       	ldi	r22, 0x06	; 6
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	67 e0       	ldi	r22, 0x07	; 7
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	81 ee       	ldi	r24, 0xE1	; 225
 352:	94 e0       	ldi	r25, 0x04	; 4
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <LCD_INIT+0x4c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_INIT+0x56>
 35e:	00 00       	nop
 360:	83 e3       	ldi	r24, 0x33	; 51
 362:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 366:	82 e3       	ldi	r24, 0x32	; 50
 368:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 36c:	88 e2       	ldi	r24, 0x28	; 40
 36e:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 372:	8c e0       	ldi	r24, 0x0C	; 12
 374:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 37e:	86 e0       	ldi	r24, 0x06	; 6
 380:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 38a:	08 95       	ret

0000038c <LCD_Write_Char>:
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 3ae:	8b b3       	in	r24, 0x1b	; 27
 3b0:	9c 2f       	mov	r25, r28
 3b2:	90 7f       	andi	r25, 0xF0	; 240
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	89 2b       	or	r24, r25
 3b8:	8b bb       	out	0x1b, r24	; 27
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 3c4:	8f e9       	ldi	r24, 0x9F	; 159
 3c6:	9f e0       	ldi	r25, 0x0F	; 15
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_Write_Char+0x3c>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_Write_Char+0x42>
 3ce:	00 00       	nop
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	63 e0       	ldi	r22, 0x03	; 3
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 3da:	20 e1       	ldi	r18, 0x10	; 16
 3dc:	c2 9f       	mul	r28, r18
 3de:	c0 01       	movw	r24, r0
 3e0:	11 24       	eor	r1, r1
 3e2:	9b b3       	in	r25, 0x1b	; 27
 3e4:	9f 70       	andi	r25, 0x0F	; 15
 3e6:	89 2b       	or	r24, r25
 3e8:	8b bb       	out	0x1b, r24	; 27
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_Write_Char+0x6c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_Write_Char+0x72>
 3fe:	00 00       	nop
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPinVal>
 40a:	8f e1       	ldi	r24, 0x1F	; 31
 40c:	9e e4       	ldi	r25, 0x4E	; 78
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <LCD_Write_String>:
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	8c 01       	movw	r16, r24
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	03 c0       	rjmp	.+6      	; 0x42c <LCD_Write_String+0x12>
 426:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_Write_Char>
 42a:	cf 5f       	subi	r28, 0xFF	; 255
 42c:	f8 01       	movw	r30, r16
 42e:	ec 0f       	add	r30, r28
 430:	f1 1d       	adc	r31, r1
 432:	80 81       	ld	r24, Z
 434:	81 11       	cpse	r24, r1
 436:	f7 cf       	rjmp	.-18     	; 0x426 <LCD_Write_String+0xc>
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

00000440 <LCD_GoTo>:
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 d0       	rcall	.+0      	; 0x446 <LCD_GoTo+0x6>
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	90 e8       	ldi	r25, 0x80	; 128
 44c:	99 83       	std	Y+1, r25	; 0x01
 44e:	90 ec       	ldi	r25, 0xC0	; 192
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	e1 e0       	ldi	r30, 0x01	; 1
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ec 0f       	add	r30, r28
 458:	fd 1f       	adc	r31, r29
 45a:	e6 0f       	add	r30, r22
 45c:	f1 1d       	adc	r31, r1
 45e:	90 81       	ld	r25, Z
 460:	89 0f       	add	r24, r25
 462:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_Write_Command>
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <LCD_WriteInteger>:
}

void LCD_WriteInteger(sint32 intgr)
{
 470:	8f 92       	push	r8
 472:	9f 92       	push	r9
 474:	af 92       	push	r10
 476:	bf 92       	push	r11
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	6b 01       	movw	r12, r22
 482:	7c 01       	movw	r14, r24

	sint32 y = 1;

	if(intgr < 0)
 484:	99 23       	and	r25, r25
 486:	5c f4       	brge	.+22     	; 0x49e <LCD_WriteInteger+0x2e>
	{
		LCD_Write_Char('-');
 488:	8d e2       	ldi	r24, 0x2D	; 45
 48a:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_Write_Char>
		intgr *= -1;
 48e:	f0 94       	com	r15
 490:	e0 94       	com	r14
 492:	d0 94       	com	r13
 494:	c0 94       	com	r12
 496:	c1 1c       	adc	r12, r1
 498:	d1 1c       	adc	r13, r1
 49a:	e1 1c       	adc	r14, r1
 49c:	f1 1c       	adc	r15, r1
{
	LCD_Write_Command(0x01); // clear screen if thing is written
}

void LCD_WriteInteger(sint32 intgr)
{
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	24 c0       	rjmp	.+72     	; 0x4f0 <LCD_WriteInteger+0x80>
		intgr *= -1;
	}

	while(intgr > 0)
	{
		y = ((y*10) + (intgr%10));
 4a8:	dc 01       	movw	r26, r24
 4aa:	cb 01       	movw	r24, r22
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	4c 01       	movw	r8, r24
 4b6:	5d 01       	movw	r10, r26
 4b8:	88 0c       	add	r8, r8
 4ba:	99 1c       	adc	r9, r9
 4bc:	aa 1c       	adc	r10, r10
 4be:	bb 1c       	adc	r11, r11
 4c0:	88 0c       	add	r8, r8
 4c2:	99 1c       	adc	r9, r9
 4c4:	aa 1c       	adc	r10, r10
 4c6:	bb 1c       	adc	r11, r11
 4c8:	88 0e       	add	r8, r24
 4ca:	99 1e       	adc	r9, r25
 4cc:	aa 1e       	adc	r10, r26
 4ce:	bb 1e       	adc	r11, r27
 4d0:	c7 01       	movw	r24, r14
 4d2:	b6 01       	movw	r22, r12
 4d4:	2a e0       	ldi	r18, 0x0A	; 10
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	0e 94 2b 03 	call	0x656	; 0x656 <__divmodsi4>
 4e0:	68 0d       	add	r22, r8
 4e2:	79 1d       	adc	r23, r9
 4e4:	8a 1d       	adc	r24, r10
 4e6:	9b 1d       	adc	r25, r11
		intgr /= 10;
 4e8:	c2 2e       	mov	r12, r18
 4ea:	d3 2e       	mov	r13, r19
 4ec:	e4 2e       	mov	r14, r20
 4ee:	f5 2e       	mov	r15, r21
	{
		LCD_Write_Char('-');
		intgr *= -1;
	}

	while(intgr > 0)
 4f0:	1c 14       	cp	r1, r12
 4f2:	1d 04       	cpc	r1, r13
 4f4:	1e 04       	cpc	r1, r14
 4f6:	1f 04       	cpc	r1, r15
 4f8:	bc f2       	brlt	.-82     	; 0x4a8 <LCD_WriteInteger+0x38>
 4fa:	12 c0       	rjmp	.+36     	; 0x520 <LCD_WriteInteger+0xb0>
		intgr /= 10;
	}

	while(y > 1 )
	{
		LCD_Write_Char(((y%10)+48));
 4fc:	2a e0       	ldi	r18, 0x0A	; 10
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	0e 94 2b 03 	call	0x656	; 0x656 <__divmodsi4>
 508:	c2 2e       	mov	r12, r18
 50a:	d3 2e       	mov	r13, r19
 50c:	e4 2e       	mov	r14, r20
 50e:	f5 2e       	mov	r15, r21
 510:	80 e3       	ldi	r24, 0x30	; 48
 512:	86 0f       	add	r24, r22
 514:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_Write_Char>
		y /= 10;
 518:	6c 2d       	mov	r22, r12
 51a:	7d 2d       	mov	r23, r13
 51c:	8e 2d       	mov	r24, r14
 51e:	9f 2d       	mov	r25, r15
	{
		y = ((y*10) + (intgr%10));
		intgr /= 10;
	}

	while(y > 1 )
 520:	62 30       	cpi	r22, 0x02	; 2
 522:	71 05       	cpc	r23, r1
 524:	81 05       	cpc	r24, r1
 526:	91 05       	cpc	r25, r1
 528:	4c f7       	brge	.-46     	; 0x4fc <LCD_WriteInteger+0x8c>
	{
		LCD_Write_Char(((y%10)+48));
		y /= 10;
	}
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	bf 90       	pop	r11
 534:	af 90       	pop	r10
 536:	9f 90       	pop	r9
 538:	8f 90       	pop	r8
 53a:	08 95       	ret

0000053c <main>:
uint8 Receive_data = 0 ; // Rx Data from Master Micro As a global variable for the main & ISR Functions

int main(void)
{
	
	LCD_INIT(); 
 53c:	0e 94 84 01 	call	0x308	; 0x308 <LCD_INIT>
	
	AC_INIT(); //Air Conditioner Initializing 
 540:	0e 94 49 00 	call	0x92	; 0x92 <AC_INIT>
	
	SPI_Slave_Init_INT(); // Initializing the micro controller as a slave SPI with Interrupt
 544:	0e 94 06 03 	call	0x60c	; 0x60c <SPI_Slave_Init_INT>
	
	
	
	uint8 *x =  "Temp =" ; // The Constant Displays to declare about the current Temprature and The A/C Mode
	uint8 *y = "A/C is";
	LCD_GoTo(0,0);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
	LCD_Write_String(x);
 550:	80 e6       	ldi	r24, 0x60	; 96
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_Write_String>
	LCD_GoTo(0,1);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
	LCD_Write_String(y);
 560:	87 e6       	ldi	r24, 0x67	; 103
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_Write_String>
	
	
	while (1)
	{
		Receive_data = SPI_RC();  // Initializing received data from the Master Micro
 568:	0e 94 28 03 	call	0x650	; 0x650 <SPI_RC>
 56c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
		
		
		/************************* Air Conditioner **************/
		
		LCD_GoTo(7,0);
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	87 e0       	ldi	r24, 0x07	; 7
 574:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
		LCD_WriteInteger(Receive_data); // The ADC Read Came from the Master Micro to be displayed on the LCD 
 578:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <__data_end>
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 38 02 	call	0x470	; 0x470 <LCD_WriteInteger>
		
		if (Receive_data  >= 25) //  Air Conditioner is ON if temp >= 25c
 586:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 58a:	89 31       	cpi	r24, 0x19	; 25
 58c:	50 f0       	brcs	.+20     	; 0x5a2 <main+0x66>
		{
			AC_ON();
 58e:	0e 94 4f 00 	call	0x9e	; 0x9e <AC_ON>
			uint8 *c = "ON ";
			LCD_GoTo(7,1);
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	87 e0       	ldi	r24, 0x07	; 7
 596:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
			LCD_Write_String(c);
 59a:	8e e6       	ldi	r24, 0x6E	; 110
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_Write_String>
		}
		
		
		
		if (Receive_data  < 24 )//  Air Conditioner is off if temp < 24c
 5a2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 5a6:	88 31       	cpi	r24, 0x18	; 24
 5a8:	f8 f6       	brcc	.-66     	; 0x568 <main+0x2c>
		{
			AC_OFF();
 5aa:	0e 94 55 00 	call	0xaa	; 0xaa <AC_OFF>
			uint8 *f = "OFF";
			LCD_GoTo(7,1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	87 e0       	ldi	r24, 0x07	; 7
 5b2:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoTo>
			LCD_Write_String(f); 
 5b6:	82 e7       	ldi	r24, 0x72	; 114
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_Write_String>
 5be:	d4 cf       	rjmp	.-88     	; 0x568 <main+0x2c>

000005c0 <__vector_12>:
	
	}
	
}
ISR(SPI_STC_vect)
{
 5c0:	1f 92       	push	r1
 5c2:	0f 92       	push	r0
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	0f 92       	push	r0
 5c8:	11 24       	eor	r1, r1
 5ca:	2f 93       	push	r18
 5cc:	3f 93       	push	r19
 5ce:	4f 93       	push	r20
 5d0:	5f 93       	push	r21
 5d2:	6f 93       	push	r22
 5d4:	7f 93       	push	r23
 5d6:	8f 93       	push	r24
 5d8:	9f 93       	push	r25
 5da:	af 93       	push	r26
 5dc:	bf 93       	push	r27
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
	Receive_data = SPI_RC(); // using the received data if true for an Interrupt 
 5e2:	0e 94 28 03 	call	0x650	; 0x650 <SPI_RC>
 5e6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <SPI_Slave_Init_INT>:
	return SPDR ; 
	
}
void SPI_Slave_Init_INT(void)
{
	DIO_SetPinDir(DIO_PORTB, DIO_PIN4, DIO_PIN_INPUT);		
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	64 e0       	ldi	r22, 0x04	; 4
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN5, DIO_PIN_INPUT);		
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	65 e0       	ldi	r22, 0x05	; 5
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);		
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	66 e0       	ldi	r22, 0x06	; 6
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN7, DIO_PIN_INPUT);		
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	67 e0       	ldi	r22, 0x07	; 7
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SetPinDir>
	
	SET_BIT(SPCR, 6);										
 634:	8d b1       	in	r24, 0x0d	; 13
 636:	9e b1       	in	r25, 0x0e	; 14
 638:	80 64       	ori	r24, 0x40	; 64
 63a:	9e b9       	out	0x0e, r25	; 14
 63c:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(SREG, 7);										
 63e:	8f b7       	in	r24, 0x3f	; 63
 640:	80 68       	ori	r24, 0x80	; 128
 642:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(SPCR, 7);										
 644:	8d b1       	in	r24, 0x0d	; 13
 646:	9e b1       	in	r25, 0x0e	; 14
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	9e b9       	out	0x0e, r25	; 14
 64c:	8d b9       	out	0x0d, r24	; 13
 64e:	08 95       	ret

00000650 <SPI_RC>:
}
uint8 SPI_RC()
{
	return SPDR;
 650:	8f b1       	in	r24, 0x0f	; 15
 652:	90 b3       	in	r25, 0x10	; 16
 654:	08 95       	ret

00000656 <__divmodsi4>:
 656:	05 2e       	mov	r0, r21
 658:	97 fb       	bst	r25, 7
 65a:	1e f4       	brtc	.+6      	; 0x662 <__divmodsi4+0xc>
 65c:	00 94       	com	r0
 65e:	0e 94 42 03 	call	0x684	; 0x684 <__negsi2>
 662:	57 fd       	sbrc	r21, 7
 664:	07 d0       	rcall	.+14     	; 0x674 <__divmodsi4_neg2>
 666:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodsi4>
 66a:	07 fc       	sbrc	r0, 7
 66c:	03 d0       	rcall	.+6      	; 0x674 <__divmodsi4_neg2>
 66e:	4e f4       	brtc	.+18     	; 0x682 <__divmodsi4_exit>
 670:	0c 94 42 03 	jmp	0x684	; 0x684 <__negsi2>

00000674 <__divmodsi4_neg2>:
 674:	50 95       	com	r21
 676:	40 95       	com	r20
 678:	30 95       	com	r19
 67a:	21 95       	neg	r18
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	4f 4f       	sbci	r20, 0xFF	; 255
 680:	5f 4f       	sbci	r21, 0xFF	; 255

00000682 <__divmodsi4_exit>:
 682:	08 95       	ret

00000684 <__negsi2>:
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__udivmodsi4>:
 694:	a1 e2       	ldi	r26, 0x21	; 33
 696:	1a 2e       	mov	r1, r26
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	fd 01       	movw	r30, r26
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <__udivmodsi4_ep>

000006a0 <__udivmodsi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	ee 1f       	adc	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	a2 17       	cp	r26, r18
 6aa:	b3 07       	cpc	r27, r19
 6ac:	e4 07       	cpc	r30, r20
 6ae:	f5 07       	cpc	r31, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__udivmodsi4_ep>
 6b2:	a2 1b       	sub	r26, r18
 6b4:	b3 0b       	sbc	r27, r19
 6b6:	e4 0b       	sbc	r30, r20
 6b8:	f5 0b       	sbc	r31, r21

000006ba <__udivmodsi4_ep>:
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a 94       	dec	r1
 6c4:	69 f7       	brne	.-38     	; 0x6a0 <__udivmodsi4_loop>
 6c6:	60 95       	com	r22
 6c8:	70 95       	com	r23
 6ca:	80 95       	com	r24
 6cc:	90 95       	com	r25
 6ce:	9b 01       	movw	r18, r22
 6d0:	ac 01       	movw	r20, r24
 6d2:	bd 01       	movw	r22, r26
 6d4:	cf 01       	movw	r24, r30
 6d6:	08 95       	ret

000006d8 <_exit>:
 6d8:	f8 94       	cli

000006da <__stop_program>:
 6da:	ff cf       	rjmp	.-2      	; 0x6da <__stop_program>
