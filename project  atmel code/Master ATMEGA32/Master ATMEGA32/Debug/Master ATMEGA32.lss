
Master ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  00000838  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bb5  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bad  00000000  00000000  00002699  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f30  00000000  00000000  00003246  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  00004178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000751  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f3a  00000000  00000000  00004d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00005ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  74:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:

void ADC_Init(void)
{
	#if   ADC_VOLTAGE_REFRENCE   ==      ADC_VREF_AVCC
	
	SET_BIT(ADMUX , 6);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX , 7);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	87 b9       	out	0x07, r24	; 7
	
	#endif
	
	#if    ADC_ADjUST            ==     ADC_RIGHT_ADJUST
	
	CLR_BIT(ADMUX , 5);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 7d       	andi	r24, 0xDF	; 223
  8c:	87 b9       	out	0x07, r24	; 7
	
	#endif
	
	#if   ADC_CHANNEL           ==     ADC_CHANNEL_1
	
	SET_BIT(ADMUX , 0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	81 60       	ori	r24, 0x01	; 1
  92:	87 b9       	out	0x07, r24	; 7
	
	#endif
	
	#if  ADC_CONVERSION_TRIGGER  ==    ADC_AUTO_TRIGGER
	
	SET_BIT(ADCSRA , 5);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	80 62       	ori	r24, 0x20	; 32
  98:	86 b9       	out	0x06, r24	; 6
	
	#endif
	
	#if  ADC_PRESCALER          ==      PRESCALER_128
	
	SET_BIT(ADCSRA , 0);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA , 1);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA , 2);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	86 b9       	out	0x06, r24	; 6
	
	#endif
	
	#if  ADC_INTERRUPT_STATUS   ==     INTERRUPT_DISABLED
	
	CLR_BIT(ADCSRA , 3);
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	86 b9       	out	0x06, r24	; 6
	
	#endif
	
	
	//Enable  ADC
	SET_BIT(ADCSRA , 7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_Read>:

uint16 ADC_Read(void)
{
	uint16 value = 0;
	
	SET_BIT(ADCSRA , 6);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 b9       	out	0x06, r24	; 6
	
	while(GET_BIT(ADCSRA,4) == 0);
  c0:	34 9b       	sbis	0x06, 4	; 6
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <ADC_Read+0x6>
	
	value = ADC_ADJUST ;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	95 b1       	in	r25, 0x05	; 5
	
	return value;
	
  c8:	08 95       	ret

000000ca <DIO_SetPinDir>:
  ca:	44 23       	and	r20, r20
  cc:	b9 f1       	breq	.+110    	; 0x13c <DIO_SetPinDir+0x72>
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	09 f0       	breq	.+2      	; 0xd4 <DIO_SetPinDir+0xa>
  d2:	6b c0       	rjmp	.+214    	; 0x1aa <DIO_SetPinDir+0xe0>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	89 f0       	breq	.+34     	; 0xfa <DIO_SetPinDir+0x30>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <DIO_SetPinDir+0x1a>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	c9 f0       	breq	.+50     	; 0x110 <DIO_SetPinDir+0x46>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	11 f1       	breq	.+68     	; 0x126 <DIO_SetPinDir+0x5c>
  e2:	08 95       	ret
  e4:	2a b3       	in	r18, 0x1a	; 26
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPinDir+0x26>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPinDir+0x22>
  f4:	82 2b       	or	r24, r18
  f6:	8a bb       	out	0x1a, r24	; 26
  f8:	08 95       	ret
  fa:	27 b3       	in	r18, 0x17	; 23
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_SetPinDir+0x3c>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_SetPinDir+0x38>
 10a:	82 2b       	or	r24, r18
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	08 95       	ret
 110:	24 b3       	in	r18, 0x14	; 20
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_SetPinDir+0x52>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_SetPinDir+0x4e>
 120:	82 2b       	or	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
 126:	21 b3       	in	r18, 0x11	; 17
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SetPinDir+0x68>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SetPinDir+0x64>
 136:	82 2b       	or	r24, r18
 138:	81 bb       	out	0x11, r24	; 17
 13a:	08 95       	ret
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 f0       	breq	.+36     	; 0x164 <DIO_SetPinDir+0x9a>
 140:	28 f0       	brcs	.+10     	; 0x14c <DIO_SetPinDir+0x82>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	d9 f0       	breq	.+54     	; 0x17c <DIO_SetPinDir+0xb2>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	29 f1       	breq	.+74     	; 0x194 <DIO_SetPinDir+0xca>
 14a:	08 95       	ret
 14c:	2a b3       	in	r18, 0x1a	; 26
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0x8e>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0x8a>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	8a bb       	out	0x1a, r24	; 26
 162:	08 95       	ret
 164:	27 b3       	in	r18, 0x17	; 23
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_SetPinDir+0xa6>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_SetPinDir+0xa2>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	87 bb       	out	0x17, r24	; 23
 17a:	08 95       	ret
 17c:	24 b3       	in	r18, 0x14	; 20
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_SetPinDir+0xbe>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_SetPinDir+0xba>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	84 bb       	out	0x14, r24	; 20
 192:	08 95       	ret
 194:	21 b3       	in	r18, 0x11	; 17
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDir+0xd6>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDir+0xd2>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	08 95       	ret

000001ac <DIO_SetPinVal>:
 1ac:	44 23       	and	r20, r20
 1ae:	b9 f1       	breq	.+110    	; 0x21e <DIO_SetPinVal+0x72>
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <DIO_SetPinVal+0xa>
 1b4:	6b c0       	rjmp	.+214    	; 0x28c <DIO_SetPinVal+0xe0>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	89 f0       	breq	.+34     	; 0x1dc <DIO_SetPinVal+0x30>
 1ba:	28 f0       	brcs	.+10     	; 0x1c6 <DIO_SetPinVal+0x1a>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	c9 f0       	breq	.+50     	; 0x1f2 <DIO_SetPinVal+0x46>
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	11 f1       	breq	.+68     	; 0x208 <DIO_SetPinVal+0x5c>
 1c4:	08 95       	ret
 1c6:	2b b3       	in	r18, 0x1b	; 27
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinVal+0x26>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinVal+0x22>
 1d6:	82 2b       	or	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
 1da:	08 95       	ret
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinVal+0x3c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinVal+0x38>
 1ec:	82 2b       	or	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	08 95       	ret
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinVal+0x52>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinVal+0x4e>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
 208:	22 b3       	in	r18, 0x12	; 18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPinVal+0x68>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPinVal+0x64>
 218:	82 2b       	or	r24, r18
 21a:	82 bb       	out	0x12, r24	; 18
 21c:	08 95       	ret
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	91 f0       	breq	.+36     	; 0x246 <DIO_SetPinVal+0x9a>
 222:	28 f0       	brcs	.+10     	; 0x22e <DIO_SetPinVal+0x82>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	d9 f0       	breq	.+54     	; 0x25e <DIO_SetPinVal+0xb2>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	29 f1       	breq	.+74     	; 0x276 <DIO_SetPinVal+0xca>
 22c:	08 95       	ret
 22e:	2b b3       	in	r18, 0x1b	; 27
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinVal+0x8e>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinVal+0x8a>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	8b bb       	out	0x1b, r24	; 27
 244:	08 95       	ret
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_SetPinVal+0xa6>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_SetPinVal+0xa2>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_SetPinVal+0xbe>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_SetPinVal+0xba>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinVal+0xd6>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinVal+0xd2>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret

0000028e <LCD_Write_Command>:
void LCD_GoTo(uint8 col, uint8 row)
{
	uint8 arr[2] = {0x80 , 0xc0};
		
	LCD_Write_Command(arr[row]+col);
}
 28e:	cf 93       	push	r28
 290:	c8 2f       	mov	r28, r24
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 2b0:	8b b3       	in	r24, 0x1b	; 27
 2b2:	9c 2f       	mov	r25, r28
 2b4:	90 7f       	andi	r25, 0xF0	; 240
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	89 2b       	or	r24, r25
 2ba:	8b bb       	out	0x1b, r24	; 27
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 2c6:	8f e9       	ldi	r24, 0x9F	; 159
 2c8:	9f e0       	ldi	r25, 0x0F	; 15
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_Write_Command+0x3c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_Write_Command+0x42>
 2d0:	00 00       	nop
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	63 e0       	ldi	r22, 0x03	; 3
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 2dc:	20 e1       	ldi	r18, 0x10	; 16
 2de:	c2 9f       	mul	r28, r18
 2e0:	c0 01       	movw	r24, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	9b b3       	in	r25, 0x1b	; 27
 2e6:	9f 70       	andi	r25, 0x0F	; 15
 2e8:	89 2b       	or	r24, r25
 2ea:	8b bb       	out	0x1b, r24	; 27
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Write_Command+0x6c>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_Write_Command+0x72>
 300:	00 00       	nop
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	63 e0       	ldi	r22, 0x03	; 3
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	9e e4       	ldi	r25, 0x4E	; 78
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCD_Write_Command+0x82>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_Write_Command+0x88>
 316:	00 00       	nop
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <LCD_INIT>:
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	65 e0       	ldi	r22, 0x05	; 5
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	66 e0       	ldi	r22, 0x06	; 6
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	81 ee       	ldi	r24, 0xE1	; 225
 366:	94 e0       	ldi	r25, 0x04	; 4
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <LCD_INIT+0x4c>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_INIT+0x56>
 372:	00 00       	nop
 374:	83 e3       	ldi	r24, 0x33	; 51
 376:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 37a:	82 e3       	ldi	r24, 0x32	; 50
 37c:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 380:	88 e2       	ldi	r24, 0x28	; 40
 382:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 386:	8c e0       	ldi	r24, 0x0C	; 12
 388:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 39e:	08 95       	ret

000003a0 <LCD_Write_Char>:
 3a0:	cf 93       	push	r28
 3a2:	c8 2f       	mov	r28, r24
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 3c2:	8b b3       	in	r24, 0x1b	; 27
 3c4:	9c 2f       	mov	r25, r28
 3c6:	90 7f       	andi	r25, 0xF0	; 240
 3c8:	8f 70       	andi	r24, 0x0F	; 15
 3ca:	89 2b       	or	r24, r25
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 3d8:	8f e9       	ldi	r24, 0x9F	; 159
 3da:	9f e0       	ldi	r25, 0x0F	; 15
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_Write_Char+0x3c>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_Write_Char+0x42>
 3e2:	00 00       	nop
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 3ee:	20 e1       	ldi	r18, 0x10	; 16
 3f0:	c2 9f       	mul	r28, r18
 3f2:	c0 01       	movw	r24, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	9b b3       	in	r25, 0x1b	; 27
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	89 2b       	or	r24, r25
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 408:	8f e9       	ldi	r24, 0x9F	; 159
 40a:	9f e0       	ldi	r25, 0x0F	; 15
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 41e:	8f e1       	ldi	r24, 0x1F	; 31
 420:	9e e4       	ldi	r25, 0x4E	; 78
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_Write_Command(0x01); // clear screen if thing is written
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Write_Command>
 434:	08 95       	ret

00000436 <main>:

extern uint8 UARTRC; // Master Data that will be received from the UART then sending this data to the Slave 1 Micro ex terning that data in a Global variable from UART.c File 

int main(void)
{
	UART_Init(); // Initializing UART communication protocol BLUETOOTH 
 436:	0e 94 af 03 	call	0x75e	; 0x75e <UART_Init>
	
	Timer1_SetCallback(UART_Rx); // Taking Flag by a Timer for the UART data Receive 
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	93 e0       	ldi	r25, 0x03	; 3
 43e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Timer1_SetCallback>
	Timer1_Init();
 442:	0e 94 34 03 	call	0x668	; 0x668 <Timer1_Init>
	Timer1_SetDelay(100);
 446:	64 e6       	ldi	r22, 0x64	; 100
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 48 03 	call	0x690	; 0x690 <Timer1_SetDelay>
	Timer1_Start();
 452:	0e 94 3e 03 	call	0x67c	; 0x67c <Timer1_Start>
	
	LCD_INIT(); // Initializing LCD
 456:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_INIT>
	
	TempSensor_Init(); // Initializing the temperature sensor as an I/P
 45a:	0e 94 cc 02 	call	0x598	; 0x598 <TempSensor_Init>
	 
	
	SPI_Master_Init(); // Initializing the Micro Controller as a Master and ss o/p for slave 1
 45e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_Master_Init>
	
	SPI_Master_Init2(); // Initializing the Micro Controller as a Master and ss o/p for slave 2	
 462:	0e 94 9e 02 	call	0x53c	; 0x53c <SPI_Master_Init2>
	 
	uint16 Temp = 0;
	    
    while (1) 
    {
		if (UARTRC)
 466:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <UARTRC>
 46a:	88 23       	and	r24, r24
 46c:	59 f1       	breq	.+86     	; 0x4c4 <main+0x8e>
		{
			if (UARTRC == 'p')       // Clearing Data in LCD if char 'p' is sent also to switch "BLUE & RED " LED OFF while clearing LCD "switching off LED code written in the Slave main.c"
 46e:	80 37       	cpi	r24, 0x70	; 112
 470:	71 f4       	brne	.+28     	; 0x48e <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	8f e3       	ldi	r24, 0x3F	; 63
 474:	9c e9       	ldi	r25, 0x9C	; 156
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <main+0x40>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <main+0x46>
 47c:	00 00       	nop
			{ 
				_delay_ms(10);       // these delays for the Proteus simulation 
				LCD_Clear();
 47e:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_Clear>
 482:	8f e3       	ldi	r24, 0x3F	; 63
 484:	9c e9       	ldi	r25, 0x9C	; 156
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <main+0x50>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0x56>
 48c:	00 00       	nop
				_delay_ms(10);
			}
			LCD_Write_Char(UARTRC);  // writing and showing the operations taken from the UART BLUETOOTH on the LCD 
 48e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <UARTRC>
 492:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_Write_Char>
			
		SPI_Master_InitTrans();     // Choosing slave 1 for begging the transmission 
 496:	0e 94 92 02 	call	0x524	; 0x524 <SPI_Master_InitTrans>
 49a:	8f e3       	ldi	r24, 0x3F	; 63
 49c:	9c e9       	ldi	r25, 0x9C	; 156
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <main+0x68>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <main+0x6e>
 4a4:	00 00       	nop
		_delay_ms(10);
		SPI_TranSiver(UARTRC);     // sending data from Master Micro and receiving data from Slave Micro to complete the SPI cycle 
 4a6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <UARTRC>
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 c3 02 	call	0x586	; 0x586 <SPI_TranSiver>
 4b0:	8f e3       	ldi	r24, 0x3F	; 63
 4b2:	9c e9       	ldi	r25, 0x9C	; 156
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <main+0x7e>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <main+0x84>
 4ba:	00 00       	nop
		_delay_ms(10);
		SPI_Master_EndTrans();    // ending the transmission to slave 1 to complete the app
 4bc:	0e 94 98 02 	call	0x530	; 0x530 <SPI_Master_EndTrans>
		
		UARTRC = 0;              // to end the condition after receiving the data from the user 
 4c0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <UARTRC>
		}
		
		/************************* Air Conditoner **************/
	
		Temp = TempSensor_Read();  // Taking the Sensor Digital Reads on a variable 
 4c4:	0e 94 cf 02 	call	0x59e	; 0x59e <TempSensor_Read>
 4c8:	ec 01       	movw	r28, r24
		SPI_Master_InitTrans2();   // Choosing slave 2 for begging the transmission 
 4ca:	0e 94 b7 02 	call	0x56e	; 0x56e <SPI_Master_InitTrans2>
 4ce:	8f e3       	ldi	r24, 0x3F	; 63
 4d0:	9c e9       	ldi	r25, 0x9C	; 156
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <main+0x9c>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <main+0xa2>
 4d8:	00 00       	nop
		_delay_ms(10);
		SPI_TranSiver(Temp);       //  sending the sensor reads to the chosen slave
 4da:	ce 01       	movw	r24, r28
 4dc:	0e 94 c3 02 	call	0x586	; 0x586 <SPI_TranSiver>
 4e0:	8f e3       	ldi	r24, 0x3F	; 63
 4e2:	9c e9       	ldi	r25, 0x9C	; 156
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <main+0xae>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0xb4>
 4ea:	00 00       	nop
		_delay_ms(10);             //  these delays for the Proteus simulation 
		SPI_Master_EndTrans2();    //  ending transmission to slave 2 to begin the cycle all over 
 4ec:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_Master_EndTrans2>
    }
 4f0:	ba cf       	rjmp	.-140    	; 0x466 <main+0x30>

000004f2 <SPI_Master_Init>:
	/*MISO PIN O/P*/
	DIO_SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_OUTPUT);
	/*CLK PIN I/P*/
	DIO_SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_INPUT);
	
	SPCR = 0x40;
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	64 e0       	ldi	r22, 0x04	; 4
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	65 e0       	ldi	r22, 0x05	; 5
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	66 e0       	ldi	r22, 0x06	; 6
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	67 e0       	ldi	r22, 0x07	; 7
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
 51a:	83 e5       	ldi	r24, 0x53	; 83
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	9e b9       	out	0x0e, r25	; 14
 520:	8d b9       	out	0x0d, r24	; 13
 522:	08 95       	ret

00000524 <SPI_Master_InitTrans>:
}

void  SPI_Master_InitTrans(void)
{
	DIO_SetPinVal(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	64 e0       	ldi	r22, 0x04	; 4
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 52e:	08 95       	ret

00000530 <SPI_Master_EndTrans>:
	
}

void  SPI_Master_EndTrans(void)
{
	DIO_SetPinVal(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	64 e0       	ldi	r22, 0x04	; 4
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 53a:	08 95       	ret

0000053c <SPI_Master_Init2>:
}
/******************************************************************************/
void  SPI_Master_Init2(void)
{
	/* SS Pin o/p , if it master you can make it any other dio pin but if it is slave must be the ss pin*/
	DIO_SetPinDir(DIO_PORTD,DIO_PIN7,DIO_PIN_OUTPUT);
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	67 e0       	ldi	r22, 0x07	; 7
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
	/*MOSI PIN*/
	DIO_SetPinDir(DIO_PORTB,DIO_PIN5,DIO_PIN_OUTPUT);
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	65 e0       	ldi	r22, 0x05	; 5
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
	/*MISO PIN*/
	DIO_SetPinDir(DIO_PORTB,DIO_PIN6,DIO_PIN_INPUT);
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	66 e0       	ldi	r22, 0x06	; 6
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
	/*CLK PIN*/
	DIO_SetPinDir(DIO_PORTB,DIO_PIN7,DIO_PIN_OUTPUT);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	67 e0       	ldi	r22, 0x07	; 7
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinDir>
	
	SPCR = 0x53;
 564:	83 e5       	ldi	r24, 0x53	; 83
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	9e b9       	out	0x0e, r25	; 14
 56a:	8d b9       	out	0x0d, r24	; 13
 56c:	08 95       	ret

0000056e <SPI_Master_InitTrans2>:



void  SPI_Master_InitTrans2(void)
{
	DIO_SetPinVal(DIO_PORTD,DIO_PIN7,DIO_PIN_LOW);
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	67 e0       	ldi	r22, 0x07	; 7
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 578:	08 95       	ret

0000057a <SPI_Master_EndTrans2>:
	
}

void  SPI_Master_EndTrans2(void)
{
	DIO_SetPinVal(DIO_PORTD,DIO_PIN7,DIO_PIN_HIGH);
 57a:	41 e0       	ldi	r20, 0x01	; 1
 57c:	67 e0       	ldi	r22, 0x07	; 7
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DIO_SetPinVal>
 584:	08 95       	ret

00000586 <SPI_TranSiver>:
}
/******************************************************************************/
uint16 SPI_TranSiver(uint16 data)
{
	SPDR = data ; 
 586:	90 bb       	out	0x10, r25	; 16
 588:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT( SPSR , 7 ) == 0);
 58a:	8e b1       	in	r24, 0x0e	; 14
 58c:	9f b1       	in	r25, 0x0f	; 15
 58e:	87 ff       	sbrs	r24, 7
 590:	fc cf       	rjmp	.-8      	; 0x58a <SPI_TranSiver+0x4>
	
	return SPDR ; 
 592:	8f b1       	in	r24, 0x0f	; 15
 594:	90 b3       	in	r25, 0x10	; 16
	
 596:	08 95       	ret

00000598 <TempSensor_Init>:
#include "Temp.h"


void TempSensor_Init(void)
{
	ADC_Init();
 598:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
 59c:	08 95       	ret

0000059e <TempSensor_Read>:
uint16 TempSensor_Read(void)
{
	uint32  Digital_OutPut = 0;
	uint32  Temp = 0;
	
	Digital_OutPut = ADC_Read();
 59e:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Read>
	
	Temp = (Digital_OutPut * 500) / 1024 ;
 5a2:	9c 01       	movw	r18, r24
 5a4:	a4 ef       	ldi	r26, 0xF4	; 244
 5a6:	b1 e0       	ldi	r27, 0x01	; 1
 5a8:	0e 94 c6 03 	call	0x78c	; 0x78c <__umulhisi3>
 5ac:	dc 01       	movw	r26, r24
 5ae:	cb 01       	movw	r24, r22
 5b0:	07 2e       	mov	r0, r23
 5b2:	7a e0       	ldi	r23, 0x0A	; 10
 5b4:	b6 95       	lsr	r27
 5b6:	a7 95       	ror	r26
 5b8:	97 95       	ror	r25
 5ba:	87 95       	ror	r24
 5bc:	7a 95       	dec	r23
 5be:	d1 f7       	brne	.-12     	; 0x5b4 <TempSensor_Read+0x16>
 5c0:	70 2d       	mov	r23, r0
	
	return Temp;
	
 5c2:	08 95       	ret

000005c4 <__vector_11>:
void Timer1_Stop(void)
{
	// no clock source
	CLR_BIT(TCCR1B, 0);
	CLR_BIT(TCCR1B, 1);
	CLR_BIT(TCCR1B, 2);
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
 5e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt_0.1666>
 5ea:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt_0.1666+0x1>
 5ee:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt_0.1666+0x2>
 5f2:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt_0.1666+0x3>
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	a1 1d       	adc	r26, r1
 5fa:	b1 1d       	adc	r27, r1
 5fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt_0.1666>
 600:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt_0.1666+0x1>
 604:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt_0.1666+0x2>
 608:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt_0.1666+0x3>
 60c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <NUM_OVF>
 610:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <NUM_OVF+0x1>
 614:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <NUM_OVF+0x2>
 618:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <NUM_OVF+0x3>
 61c:	84 17       	cp	r24, r20
 61e:	95 07       	cpc	r25, r21
 620:	a6 07       	cpc	r26, r22
 622:	b7 07       	cpc	r27, r23
 624:	81 f4       	brne	.+32     	; 0x646 <__vector_11+0x82>
 626:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ptr0>
 62a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ptr0+0x1>
 62e:	09 95       	icall
 630:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt_0.1666>
 634:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt_0.1666+0x1>
 638:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt_0.1666+0x2>
 63c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt_0.1666+0x3>
 640:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <INIT_VALUE>
 644:	82 bf       	out	0x32, r24	; 50
 646:	ff 91       	pop	r31
 648:	ef 91       	pop	r30
 64a:	bf 91       	pop	r27
 64c:	af 91       	pop	r26
 64e:	9f 91       	pop	r25
 650:	8f 91       	pop	r24
 652:	7f 91       	pop	r23
 654:	6f 91       	pop	r22
 656:	5f 91       	pop	r21
 658:	4f 91       	pop	r20
 65a:	3f 91       	pop	r19
 65c:	2f 91       	pop	r18
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <Timer1_Init>:
 668:	8e b5       	in	r24, 0x2e	; 46
 66a:	88 60       	ori	r24, 0x08	; 8
 66c:	8e bd       	out	0x2e, r24	; 46
 66e:	8f b7       	in	r24, 0x3f	; 63
 670:	80 68       	ori	r24, 0x80	; 128
 672:	8f bf       	out	0x3f, r24	; 63
 674:	89 b7       	in	r24, 0x39	; 57
 676:	80 61       	ori	r24, 0x10	; 16
 678:	89 bf       	out	0x39, r24	; 57
 67a:	08 95       	ret

0000067c <Timer1_Start>:
 67c:	8e b5       	in	r24, 0x2e	; 46
 67e:	81 60       	ori	r24, 0x01	; 1
 680:	8e bd       	out	0x2e, r24	; 46
 682:	8e b5       	in	r24, 0x2e	; 46
 684:	8d 7f       	andi	r24, 0xFD	; 253
 686:	8e bd       	out	0x2e, r24	; 46
 688:	8e b5       	in	r24, 0x2e	; 46
 68a:	84 60       	ori	r24, 0x04	; 4
 68c:	8e bd       	out	0x2e, r24	; 46
 68e:	08 95       	ret

00000690 <Timer1_SetDelay>:
}

void Timer1_SetDelay(uint32 delay_ms)
{
	if (delay_ms <= 4000)
 690:	61 3a       	cpi	r22, 0xA1	; 161
 692:	2f e0       	ldi	r18, 0x0F	; 15
 694:	72 07       	cpc	r23, r18
 696:	81 05       	cpc	r24, r1
 698:	91 05       	cpc	r25, r1
 69a:	a8 f4       	brcc	.+42     	; 0x6c6 <Timer1_SetDelay+0x36>
	{
		uint8 tick_time = 1024 / 16;
		uint32 num_ticks = (delay_ms * 1000) / tick_time;
 69c:	a8 ee       	ldi	r26, 0xE8	; 232
 69e:	b3 e0       	ldi	r27, 0x03	; 3
 6a0:	9b 01       	movw	r18, r22
 6a2:	ac 01       	movw	r20, r24
 6a4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__muluhisi3>
 6a8:	dc 01       	movw	r26, r24
 6aa:	cb 01       	movw	r24, r22
 6ac:	68 94       	set
 6ae:	15 f8       	bld	r1, 5
 6b0:	b6 95       	lsr	r27
 6b2:	a7 95       	ror	r26
 6b4:	97 95       	ror	r25
 6b6:	87 95       	ror	r24
 6b8:	16 94       	lsr	r1
 6ba:	d1 f7       	brne	.-12     	; 0x6b0 <Timer1_SetDelay+0x20>
		OCR1A = num_ticks - 1;
 6bc:	bc 01       	movw	r22, r24
 6be:	61 50       	subi	r22, 0x01	; 1
 6c0:	71 09       	sbc	r23, r1
 6c2:	7b bd       	out	0x2b, r23	; 43
 6c4:	6a bd       	out	0x2a, r22	; 42
 6c6:	08 95       	ret

000006c8 <Timer1_SetCallback>:
	}
}

void Timer1_SetCallback(void(*p)(void))
{
	ptr1 = p;
 6c8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ptr1+0x1>
 6cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <ptr1>
 6d0:	08 95       	ret

000006d2 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)
{
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
	static uint32 cnt_1 = 0;
	cnt_1++;
 6f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6fc:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 700:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	a1 1d       	adc	r26, r1
 708:	b1 1d       	adc	r27, r1
 70a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 70e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 712:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 716:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	if (cnt_1 == 1)
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	a1 05       	cpc	r26, r1
 71e:	b1 05       	cpc	r27, r1
 720:	69 f4       	brne	.+26     	; 0x73c <__vector_7+0x6a>
	{
		cnt_1 = 0;
 722:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 726:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 72a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 72e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		(*ptr1)();
 732:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <ptr1>
 736:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <ptr1+0x1>
 73a:	09 95       	icall
	}
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <UART_Init>:
	while(str[i] !='\0')
	{
		UART_Tx(str[i]);
		i++;
	}
}
 75e:	81 b3       	in	r24, 0x11	; 17
 760:	82 60       	ori	r24, 0x02	; 2
 762:	81 bb       	out	0x11, r24	; 17
 764:	81 b3       	in	r24, 0x11	; 17
 766:	8e 7f       	andi	r24, 0xFE	; 254
 768:	81 bb       	out	0x11, r24	; 17
 76a:	8a b1       	in	r24, 0x0a	; 10
 76c:	88 60       	ori	r24, 0x08	; 8
 76e:	8a b9       	out	0x0a, r24	; 10
 770:	8a b1       	in	r24, 0x0a	; 10
 772:	80 61       	ori	r24, 0x10	; 16
 774:	8a b9       	out	0x0a, r24	; 10
 776:	86 e8       	ldi	r24, 0x86	; 134
 778:	80 bd       	out	0x20, r24	; 32
 77a:	87 e6       	ldi	r24, 0x67	; 103
 77c:	89 b9       	out	0x09, r24	; 9
 77e:	08 95       	ret

00000780 <UART_Rx>:


void UART_Rx (void)
{
	//if data received //
	if(GET_BIT(UCSRA,7) == 1)
 780:	5f 9b       	sbis	0x0b, 7	; 11
 782:	03 c0       	rjmp	.+6      	; 0x78a <UART_Rx+0xa>
	{
		UARTRC = UDR;
 784:	8c b1       	in	r24, 0x0c	; 12
 786:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <UARTRC>
 78a:	08 95       	ret

0000078c <__umulhisi3>:
 78c:	a2 9f       	mul	r26, r18
 78e:	b0 01       	movw	r22, r0
 790:	b3 9f       	mul	r27, r19
 792:	c0 01       	movw	r24, r0
 794:	a3 9f       	mul	r26, r19
 796:	70 0d       	add	r23, r0
 798:	81 1d       	adc	r24, r1
 79a:	11 24       	eor	r1, r1
 79c:	91 1d       	adc	r25, r1
 79e:	b2 9f       	mul	r27, r18
 7a0:	70 0d       	add	r23, r0
 7a2:	81 1d       	adc	r24, r1
 7a4:	11 24       	eor	r1, r1
 7a6:	91 1d       	adc	r25, r1
 7a8:	08 95       	ret

000007aa <__muluhisi3>:
 7aa:	0e 94 c6 03 	call	0x78c	; 0x78c <__umulhisi3>
 7ae:	a5 9f       	mul	r26, r21
 7b0:	90 0d       	add	r25, r0
 7b2:	b4 9f       	mul	r27, r20
 7b4:	90 0d       	add	r25, r0
 7b6:	a4 9f       	mul	r26, r20
 7b8:	80 0d       	add	r24, r0
 7ba:	91 1d       	adc	r25, r1
 7bc:	11 24       	eor	r1, r1
 7be:	08 95       	ret

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
